Analyzing grammar:
    S -> ID ASSIGN E
    S -> IF LP E RP S ELSE S
    E -> T EP
    T -> ID
    T -> LP E RP
    EP -> 
    EP -> PLUS E

terminals =  set(['RP', 'ASSIGN', 'PLUS', 'LP', 'ELSE', 'ID', 'IF'])
nonterminals =  set(['S', 'E', 'T', 'EP'])

nullable =  set(['EP'])

first(ASSIGN) = set(['ASSIGN'])
first(E) = set(['ID', 'LP'])
first(ELSE) = set(['ELSE'])
first(EP) = set(['PLUS'])
first(ID) = set(['ID'])
first(IF) = set(['IF'])
first(LP) = set(['LP'])
first(PLUS) = set(['PLUS'])
first(RP) = set(['RP'])
first(S) = set(['ID', 'IF'])
first(T) = set(['ID', 'LP'])

follow(E) = set(['RP', 'EOF', 'ELSE'])
follow(EP) = set(['RP', 'EOF', 'ELSE'])
follow(S) = set(['EOF', 'ELSE'])
follow(T) = set(['PLUS', 'EOF', 'RP', 'ELSE'])

select(E -> T EP) = set(['ID', 'LP'])
select(EP -> ) = set(['RP', 'EOF', 'ELSE'])
select(EP -> PLUS E) = set(['PLUS'])
select(S -> ID ASSIGN E) = set(['ID'])
select(S -> IF LP E RP S ELSE S) = set(['IF'])
select(T -> ID) = set(['ID'])
select(T -> LP E RP) = set(['LP'])

Grammar is LL(1).


Analyzing grammar:
    obj -> LB RB
    obj -> LB members RB
    members -> keyvalue
    members -> members COMMA members
    keyvalue -> STRING COLON value
    value -> STRING
    value -> INT
    value -> obj

terminals =  set(['LB', 'STRING', 'INT', 'COLON', 'RB', 'COMMA'])
nonterminals =  set(['keyvalue', 'obj', 'value', 'members'])

nullable =  set([])

first(COLON) = set(['COLON'])
first(COMMA) = set(['COMMA'])
first(INT) = set(['INT'])
first(LB) = set(['LB'])
first(RB) = set(['RB'])
first(STRING) = set(['STRING'])
first(keyvalue) = set(['STRING'])
first(members) = set(['STRING'])
first(obj) = set(['LB'])
first(value) = set(['INT', 'LB', 'STRING'])

follow(keyvalue) = set(['COMMA', 'RB'])
follow(members) = set(['COMMA', 'RB'])
follow(obj) = set(['COMMA', 'EOF', 'RB'])
follow(value) = set(['COMMA', 'RB'])

select(keyvalue -> STRING COLON value) = set(['STRING'])
select(members -> keyvalue) = set(['STRING'])
select(members -> members COMMA members) = set(['STRING'])
select(obj -> LB RB) = set(['LB'])
select(obj -> LB members RB) = set(['LB'])
select(value -> INT) = set(['INT'])
select(value -> STRING) = set(['STRING'])
select(value -> obj) = set(['LB'])

Grammar is not LL(1), as the following rules have intersecting SELECT sets:
    obj -> LB RB
    obj -> LB members RB
Grammar is not LL(1), as the following rules have intersecting SELECT sets:
    members -> keyvalue
    members -> members COMMA members


Analyzing grammar:
    obj -> LB RB
    obj -> LB members RB
    members -> keyvalue
    members -> members COMMA keyvalue
    keyvalue -> STRING COLON value
    value -> STRING
    value -> INT
    value -> obj

terminals =  set(['LB', 'STRING', 'INT', 'COLON', 'RB', 'COMMA'])
nonterminals =  set(['keyvalue', 'obj', 'value', 'members'])

nullable =  set([])

first(COLON) = set(['COLON'])
first(COMMA) = set(['COMMA'])
first(INT) = set(['INT'])
first(LB) = set(['LB'])
first(RB) = set(['RB'])
first(STRING) = set(['STRING'])
first(keyvalue) = set(['STRING'])
first(members) = set(['STRING'])
first(obj) = set(['LB'])
first(value) = set(['INT', 'LB', 'STRING'])

follow(keyvalue) = set(['COMMA', 'RB'])
follow(members) = set(['COMMA', 'RB'])
follow(obj) = set(['COMMA', 'EOF', 'RB'])
follow(value) = set(['COMMA', 'RB'])

select(keyvalue -> STRING COLON value) = set(['STRING'])
select(members -> keyvalue) = set(['STRING'])
select(members -> members COMMA keyvalue) = set(['STRING'])
select(obj -> LB RB) = set(['LB'])
select(obj -> LB members RB) = set(['LB'])
select(value -> INT) = set(['INT'])
select(value -> STRING) = set(['STRING'])
select(value -> obj) = set(['LB'])

Grammar is not LL(1), as the following rules have intersecting SELECT sets:
    obj -> LB RB
    obj -> LB members RB
Grammar is not LL(1), as the following rules have intersecting SELECT sets:
    members -> keyvalue
    members -> members COMMA keyvalue


Analyzing grammar:
    obj -> LB obj_right
    obj_right -> RB
    obj_right -> members RB
    members -> keyvalue members_right
    members_right -> 
    members_right -> COMMA members
    keyvalue -> STRING COLON value
    value -> STRING
    value -> INT
    value -> obj

terminals =  set(['LB', 'STRING', 'INT', 'COLON', 'RB', 'COMMA'])
nonterminals =  set(['obj', 'obj_right', 'value', 'keyvalue', 'members', 'members_right'])

nullable =  set(['members_right'])

first(COLON) = set(['COLON'])
first(COMMA) = set(['COMMA'])
first(INT) = set(['INT'])
first(LB) = set(['LB'])
first(RB) = set(['RB'])
first(STRING) = set(['STRING'])
first(keyvalue) = set(['STRING'])
first(members) = set(['STRING'])
first(members_right) = set(['COMMA'])
first(obj) = set(['LB'])
first(obj_right) = set(['STRING', 'RB'])
first(value) = set(['INT', 'LB', 'STRING'])

follow(keyvalue) = set(['COMMA', 'RB'])
follow(members) = set(['RB'])
follow(members_right) = set(['RB'])
follow(obj) = set(['COMMA', 'EOF', 'RB'])
follow(obj_right) = set(['COMMA', 'EOF', 'RB'])
follow(value) = set(['COMMA', 'RB'])

select(keyvalue -> STRING COLON value) = set(['STRING'])
select(members -> keyvalue members_right) = set(['STRING'])
select(members_right -> ) = set(['RB'])
select(members_right -> COMMA members) = set(['COMMA'])
select(obj -> LB obj_right) = set(['LB'])
select(obj_right -> RB) = set(['RB'])
select(obj_right -> members RB) = set(['STRING'])
select(value -> INT) = set(['INT'])
select(value -> STRING) = set(['STRING'])
select(value -> obj) = set(['LB'])

Grammar is LL(1).


Analyzing grammar:
    obj -> LB obj_right
    obj_right -> RB
    obj_right -> members RB
    members -> keyvalue members_right
    members_right -> 
    members_right -> COMMA members
    keyvalue -> STRING COLON value
    value -> STRING
    value -> INT
    value -> obj
    value -> array
    array -> LS array_right
    array_right -> RS
    array_right -> array_members RS
    array_members -> value array_members_right
    array_members_right -> 
    array_members_right -> COMMA array_members

terminals =  set(['LB', 'STRING', 'RS', 'INT', 'COLON', 'LS', 'RB', 'COMMA'])
nonterminals =  set(['obj', 'obj_right', 'value', 'array_members_right', 'keyvalue', 'members', 'members_right', 'array', 'array_members', 'array_right'])

nullable =  set(['array_members_right', 'members_right'])

first(COLON) = set(['COLON'])
first(COMMA) = set(['COMMA'])
first(INT) = set(['INT'])
first(LB) = set(['LB'])
first(LS) = set(['LS'])
first(RB) = set(['RB'])
first(RS) = set(['RS'])
first(STRING) = set(['STRING'])
first(array) = set(['LS'])
first(array_members) = set(['LB', 'STRING', 'INT', 'LS'])
first(array_members_right) = set(['COMMA'])
first(array_right) = set(['LB', 'STRING', 'RS', 'INT', 'LS'])
first(keyvalue) = set(['STRING'])
first(members) = set(['STRING'])
first(members_right) = set(['COMMA'])
first(obj) = set(['LB'])
first(obj_right) = set(['STRING', 'RB'])
first(value) = set(['INT', 'LB', 'STRING', 'LS'])

follow(array) = set(['COMMA', 'RB', 'RS'])
follow(array_members) = set(['RS'])
follow(array_members_right) = set(['RS'])
follow(array_right) = set(['COMMA', 'RB', 'RS'])
follow(keyvalue) = set(['COMMA', 'RB'])
follow(members) = set(['RB'])
follow(members_right) = set(['RB'])
follow(obj) = set(['COMMA', 'EOF', 'RB', 'RS'])
follow(obj_right) = set(['COMMA', 'EOF', 'RB', 'RS'])
follow(value) = set(['COMMA', 'RB', 'RS'])

select(array -> LS array_right) = set(['LS'])
select(array_members -> value array_members_right) = set(['INT', 'LB', 'STRING', 'LS'])
select(array_members_right -> ) = set(['RS'])
select(array_members_right -> COMMA array_members) = set(['COMMA'])
select(array_right -> RS) = set(['RS'])
select(array_right -> array_members RS) = set(['INT', 'LB', 'STRING', 'LS'])
select(keyvalue -> STRING COLON value) = set(['STRING'])
select(members -> keyvalue members_right) = set(['STRING'])
select(members_right -> ) = set(['RB'])
select(members_right -> COMMA members) = set(['COMMA'])
select(obj -> LB obj_right) = set(['LB'])
select(obj_right -> RB) = set(['RB'])
select(obj_right -> members RB) = set(['STRING'])
select(value -> INT) = set(['INT'])
select(value -> STRING) = set(['STRING'])
select(value -> array) = set(['LS'])
select(value -> obj) = set(['LB'])

Grammar is LL(1).


